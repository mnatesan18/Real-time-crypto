// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=ts,keep_empty_files=false"
// @generated from file price.proto (package pluto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Empty message for simple requests
 *
 * @generated from message pluto.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message pluto.AddTickerRequest
 */
export class AddTickerRequest extends Message<AddTickerRequest> {
  /**
   * @generated from field: string ticker = 1;
   */
  ticker = "";

  constructor(data?: PartialMessage<AddTickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.AddTickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddTickerRequest | PlainMessage<AddTickerRequest> | undefined, b: AddTickerRequest | PlainMessage<AddTickerRequest> | undefined): boolean {
    return proto3.util.equals(AddTickerRequest, a, b);
  }
}

/**
 * @generated from message pluto.RemoveTickerRequest
 */
export class RemoveTickerRequest extends Message<RemoveTickerRequest> {
  /**
   * @generated from field: string ticker = 1;
   */
  ticker = "";

  constructor(data?: PartialMessage<RemoveTickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.RemoveTickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTickerRequest | PlainMessage<RemoveTickerRequest> | undefined, b: RemoveTickerRequest | PlainMessage<RemoveTickerRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTickerRequest, a, b);
  }
}

/**
 * @generated from message pluto.ListTickersResponse
 */
export class ListTickersResponse extends Message<ListTickersResponse> {
  /**
   * @generated from field: repeated string tickers = 1;
   */
  tickers: string[] = [];

  constructor(data?: PartialMessage<ListTickersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.ListTickersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tickers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTickersResponse {
    return new ListTickersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTickersResponse {
    return new ListTickersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTickersResponse {
    return new ListTickersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTickersResponse | PlainMessage<ListTickersResponse> | undefined, b: ListTickersResponse | PlainMessage<ListTickersResponse> | undefined): boolean {
    return proto3.util.equals(ListTickersResponse, a, b);
  }
}

/**
 * @generated from message pluto.StreamPricesRequest
 */
export class StreamPricesRequest extends Message<StreamPricesRequest> {
  /**
   * @generated from field: repeated string tickers = 1;
   */
  tickers: string[] = [];

  constructor(data?: PartialMessage<StreamPricesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.StreamPricesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tickers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamPricesRequest {
    return new StreamPricesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamPricesRequest {
    return new StreamPricesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamPricesRequest {
    return new StreamPricesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamPricesRequest | PlainMessage<StreamPricesRequest> | undefined, b: StreamPricesRequest | PlainMessage<StreamPricesRequest> | undefined): boolean {
    return proto3.util.equals(StreamPricesRequest, a, b);
  }
}

/**
 * @generated from message pluto.PriceUpdate
 */
export class PriceUpdate extends Message<PriceUpdate> {
  /**
   * @generated from field: string ticker = 1;
   */
  ticker = "";

  /**
   * @generated from field: double price = 2;
   */
  price = 0;

  /**
   * timestamp in milliseconds
   *
   * @generated from field: int64 ts_ms = 3;
   */
  tsMs = protoInt64.zero;

  constructor(data?: PartialMessage<PriceUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pluto.PriceUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "ts_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceUpdate {
    return new PriceUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceUpdate {
    return new PriceUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceUpdate {
    return new PriceUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: PriceUpdate | PlainMessage<PriceUpdate> | undefined, b: PriceUpdate | PlainMessage<PriceUpdate> | undefined): boolean {
    return proto3.util.equals(PriceUpdate, a, b);
  }
}

